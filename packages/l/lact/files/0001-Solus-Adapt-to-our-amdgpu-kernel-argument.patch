Adapt to our amdgpu kernel argument
diff --git a/lact-client/src/lib.rs b/lact-client/src/lib.rs
index a28525d..2eb515d 100644
--- a/lact-client/src/lib.rs
+++ b/lact-client/src/lib.rs
@@ -125,8 +125,6 @@ impl DaemonClient {
     }
 
     request_plain!(get_system_info, SystemInfo, SystemInfo);
-    request_plain!(enable_overdrive, EnableOverdrive, String);
-    request_plain!(disable_overdrive, DisableOverdrive, String);
     request_plain!(generate_debug_snapshot, GenerateSnapshot, String);
     request_plain!(reset_config, RestConfig, ());
     request_with_id!(get_device_info, DeviceInfo, DeviceInfo);
diff --git a/lact-daemon/src/server.rs b/lact-daemon/src/server.rs
index 8f2a80d..ce44a0f 100644
--- a/lact-daemon/src/server.rs
+++ b/lact-daemon/src/server.rs
@@ -208,8 +208,6 @@ async fn handle_request<'a>(request: Request<'a>, handler: &'a Handler) -> anyho
             ok_response(handler.set_gpu_config(id, *config).await?)
         }
         Request::ProcessList { id } => ok_response(handler.process_list(id).await?),
-        Request::EnableOverdrive => ok_response(system::enable_overdrive().await?),
-        Request::DisableOverdrive => ok_response(system::disable_overdrive().await?),
         Request::GenerateSnapshot => ok_response(handler.generate_snapshot().await?),
         Request::ConfirmPendingConfig(command) => {
             ok_response(handler.confirm_pending_config(command)?)
diff --git a/lact-daemon/src/system.rs b/lact-daemon/src/system.rs
index e444ee5..9601be8 100644
--- a/lact-daemon/src/system.rs
+++ b/lact-daemon/src/system.rs
@@ -29,6 +29,7 @@ static OC_TOGGLED: AtomicBool = AtomicBool::new(false);
 const PP_OVERDRIVE_MASK: u64 = 0x4000;
 pub const PP_FEATURE_MASK_PATH: &str = "/sys/module/amdgpu/parameters/ppfeaturemask";
 pub const BASE_MODULE_CONF_PATH: &str = "/etc/modprobe.d/99-amdgpu-overdrive.conf";
+pub const OVERDRIVE_ENABLED_PATH: &str = "/sys/module/amdgpu/parameters/overdrive_enabled";
 pub const DAEMON_VERSION: &str = env!("CARGO_PKG_VERSION");
 
 pub static IS_FLATBOX: LazyLock<bool> =
@@ -60,8 +61,10 @@ pub async fn info() -> anyhow::Result<SystemInfo> {
         .trim()
         .to_owned();
 
-    let amdgpu_overdrive_enabled = if let Ok(mask) = read_current_mask() {
-        Some((mask & PP_OVERDRIVE_MASK) > 0)
+     let amdgpu_overdrive_enabled = if let Ok(true) = is_overdrive_enabled_flag() {
+        Some(true)
+    } else if let Ok(mask) = read_current_mask() {
+    	Some((mask & PP_OVERDRIVE_MASK) > 0)
     } else {
         None
     };
@@ -82,110 +85,14 @@ pub async fn info() -> anyhow::Result<SystemInfo> {
     })
 }
 
-pub async fn enable_overdrive() -> anyhow::Result<String> {
-    ensure!(
-        !OC_TOGGLED.load(Ordering::SeqCst),
-        "Overdrive support was already toggled - please reboot to apply the changes"
-    );
-
-    let current_mask = read_current_mask().context("Could not get current amdgpu feature mask")?;
-
-    let new_mask = current_mask | PP_OVERDRIVE_MASK;
-    if new_mask == current_mask {
-        return Err(anyhow!("Overdrive mask already enabled"));
-    }
-
-    let os_release = get_os_release()?;
-    let configurator = detect_amdgpu_configurator(&os_release).await?;
-    match configurator {
-        AmdgpuParamsConfigurator::Modprobe(initramfs_type) => {
-            let conf = format!("options amdgpu ppfeaturemask=0x{new_mask:X}");
-
-            let mut file =
-                File::create(&*MODULE_CONF_PATH).context("Could not open module conf file")?;
-            file.set_permissions(Permissions::from_mode(0o644))
-                .context("Could not conf file permissions")?;
-
-            file.write_all(conf.as_bytes())
-                .context("Could not write config")?;
-
-            if let Some(initramfs) = initramfs_type {
-                regenerate_initramfs(initramfs).await?;
-            }
-        }
-        AmdgpuParamsConfigurator::BootArg(BootArgConfigurator::RpmOstree) => {
-            run_command(
-                "rpm-ostree",
-                &[
-                    "kargs",
-                    &format!("--append-if-missing=amdgpu.ppfeaturemask=0x{new_mask:X}"),
-                ],
-            )
-            .await?;
-        }
-    }
-
-    OC_TOGGLED.store(true, Ordering::SeqCst);
-
-    // Returning a string only to maintain API compat
-    Ok(String::new())
-}
-
-pub async fn disable_overdrive() -> anyhow::Result<String> {
-    ensure!(
-        !OC_TOGGLED.load(Ordering::SeqCst),
-        "Overdrive support was already toggled - please reboot to apply the changes"
-    );
-
-    let os_release = get_os_release()?;
-    let configurator = detect_amdgpu_configurator(&os_release).await?;
-    match configurator {
-        AmdgpuParamsConfigurator::Modprobe(initramfs_type) => {
-            if Path::new(&*MODULE_CONF_PATH).exists() {
-                fs::remove_file(&*MODULE_CONF_PATH)
-                    .context("Could not remove module config file")?;
-
-                if let Some(initramfs) = initramfs_type {
-                    regenerate_initramfs(initramfs).await?;
-                }
-            } else {
-                bail!(
-                    "Overclocking was not enabled through LACT (file at {} does not exist)",
-                    MODULE_CONF_PATH.display(),
-                );
-            }
-        }
-        AmdgpuParamsConfigurator::BootArg(BootArgConfigurator::RpmOstree) => {
-            let current_mask =
-                read_current_mask().context("Could not get current amdgpu feature mask")?;
-            run_command(
-                "rpm-ostree",
-                &[
-                    "kargs",
-                    &format!("--delete-if-present=amdgpu.ppfeaturemask=0x{current_mask:X}"),
-                ],
-            )
-            .await?;
-        }
-    }
-
-    OC_TOGGLED.store(true, Ordering::SeqCst);
-
-    // Returning a string only to maintain API compat
-    Ok(String::new())
+fn is_overdrive_enabled_flag() -> anyhow::Result<bool> {
+	let overdrive_enabled = fs::read_to_string(OVERDRIVE_ENABLED_PATH)?;
+	if overdrive_enabled.trim() != "0" {
+		Ok(true)
+	} else {
+		Ok(false)
+	}
 }
-
-async fn regenerate_initramfs(initramfs_type: InitramfsType) -> anyhow::Result<()> {
-    info!("detected initramfs type {initramfs_type:?}, regenerating");
-    let result = match initramfs_type {
-        InitramfsType::Debian => run_command("update-initramfs", &["-u"]).await,
-        InitramfsType::Mkinitcpio => run_command("mkinitcpio", &["-P"]).await,
-        InitramfsType::Dracut => run_command("dracut", &["--regenerate-all", "--force"]).await,
-    };
-    result.context("Initramfs generation command failed")?;
-    Ok(())
-}
-
 fn read_current_mask() -> anyhow::Result<u64> {
     let ppfeaturemask = fs::read_to_string(PP_FEATURE_MASK_PATH)?;
     let ppfeaturemask = ppfeaturemask
diff --git a/lact-gui/src/app.rs b/lact-gui/src/app.rs
index 82b26ec..eb8af81 100644
--- a/lact-gui/src/app.rs
+++ b/lact-gui/src/app.rs
@@ -356,9 +356,6 @@ impl AppModel {
                     self.update_gpu_data(gpu_id, sender).await?;
                 }
             }
-            AppMsg::ShowOverdriveDialog => {
-                self.overdrive_dialog.emit(OverdriveDialogMsg::Show);
-            }
             AppMsg::SelectProfile {
                 profile,
                 auto_switch,
@@ -512,18 +509,6 @@ impl AppModel {
             AppMsg::DebugSnapshot => {
                 self.generate_debug_snapshot(root).await;
             }
-            AppMsg::EnableOverdrive => {
-                self.overdrive_dialog.emit(OverdriveDialogMsg::Loading);
-                let result = self.daemon_client.enable_overdrive().await;
-                self.overdrive_dialog.emit(OverdriveDialogMsg::Loaded);
-                result?;
-            }
-            AppMsg::DisableOverdrive => {
-                self.overdrive_dialog.emit(OverdriveDialogMsg::Loading);
-                let result = self.daemon_client.disable_overdrive().await;
-                self.overdrive_dialog.emit(OverdriveDialogMsg::Loaded);
-                result?;
-            }
             AppMsg::ResetConfig => {
                 self.daemon_client.reset_config().await?;
                 sender.input(AppMsg::ReloadData { full: true });
diff --git a/lact-gui/src/app/header.rs b/lact-gui/src/app/header.rs
index 1d5251b..9c745a8 100644
--- a/lact-gui/src/app/header.rs
+++ b/lact-gui/src/app/header.rs
@@ -184,14 +184,6 @@ impl Component for Header {
 
                         gtk::Separator {},
 
-                        gtk::Button {
-                            set_label: &fl!(I18N, "disable-amd-oc"),
-                            connect_clicked => move |_| APP_BROKER.send(AppMsg::ShowOverdriveDialog),
-                            add_css_class: "flat",
-                            #[watch]
-                            set_sensitive: model.system_info.amdgpu_overdrive_enabled.is_some(),
-                        },
-
                         gtk::Button {
                             set_label: &fl!(I18N, "reset-all-config"),
                             connect_clicked => move |_| {
diff --git a/lact-gui/src/app/msg.rs b/lact-gui/src/app/msg.rs
index 1e8a352..6b20c29 100644
--- a/lact-gui/src/app/msg.rs
+++ b/lact-gui/src/app/msg.rs
@@ -22,9 +22,6 @@ pub enum AppMsg {
     ShowProcessMonitor,
     DumpVBios,
     DebugSnapshot,
-    ShowOverdriveDialog,
-    EnableOverdrive,
-    DisableOverdrive,
     ResetConfig,
     FetchProcessList,
     ReloadProfiles {
diff --git a/lact-gui/src/app/overdrive_dialog.rs b/lact-gui/src/app/overdrive_dialog.rs
index 12ca98a..4006b29 100644
--- a/lact-gui/src/app/overdrive_dialog.rs
+++ b/lact-gui/src/app/overdrive_dialog.rs
@@ -78,25 +78,7 @@ impl relm4::Component for OverdriveDialog {
 
                 gtk::Box {
                     set_spacing: 10,
-                    set_orientation: gtk::Orientation::Horizontal,
-
-                    gtk::Button {
-                        #[watch]
-                        set_sensitive: model.system_info.amdgpu_overdrive_enabled == Some(false) && !model.is_loading && !model.is_done,
-                        set_label: &fl!(I18N, "enable-amd-oc"),
-                        connect_clicked => move |_| {
-                            APP_BROKER.send(AppMsg::EnableOverdrive);
-                        },
-                    },
-
-                    gtk::Button {
-                        #[watch]
-                        set_sensitive: model.system_info.amdgpu_overdrive_enabled == Some(true) && !model.is_loading && !model.is_done,
-                        set_label: &fl!(I18N, "disable-amd-oc"),
-                        connect_clicked => move |_| {
-                            APP_BROKER.send(AppMsg::DisableOverdrive);
-                        },
-                    },
+                    set_orientation: gtk::Orientation::Horizontal,    
                 },
 
                 gtk::Label {
diff --git a/lact-gui/src/app/pages/oc_page.rs b/lact-gui/src/app/pages/oc_page.rs
index 22c45e1..a9a97cf 100644
--- a/lact-gui/src/app/pages/oc_page.rs
+++ b/lact-gui/src/app/pages/oc_page.rs
@@ -78,21 +78,6 @@ impl relm4::Component for OcPage {
                         set_orientation: gtk::Orientation::Vertical,
                         set_spacing: 2,
                         set_margin_all: 10,
-
-                        gtk::Label {
-                            set_markup: &fl!(I18N, "amd-oc-disabled"),
-                            set_wrap: true,
-                            set_wrap_mode: pango::WrapMode::Word,
-                        },
-
-                        gtk::Button {
-                            set_label: &fl!(I18N, "enable-amd-oc"),
-                            set_halign: gtk::Align::End,
-
-                            connect_clicked[sender] => move |_| {
-                                sender.output(AppMsg::ShowOverdriveDialog).expect("Channel closed");
-                            }
-                        },
                     },
                 },
 
diff --git a/lact-schema/src/request.rs b/lact-schema/src/request.rs
index 5bec83a..fc148d1 100644
--- a/lact-schema/src/request.rs
+++ b/lact-schema/src/request.rs
@@ -104,8 +104,6 @@ pub enum Request<'a> {
     ProcessList {
         id: &'a str,
     },
-    EnableOverdrive,
-    DisableOverdrive,
     GenerateSnapshot,
     ConfirmPendingConfig(ConfirmCommand),
     RestConfig,
